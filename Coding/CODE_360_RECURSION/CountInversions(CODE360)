CODE 360:  Count Inversions (RECURSION + MERGE SORT)

// use dry run to see recursion tree 

#include <bits/stdc++.h>
using namespace std;

long long mergeAndCount(vector<long long>& arr, int low, int mid, int high) {
    vector<long long> temp;
    int left = low, right = mid + 1;
    long long invCount = 0;

    while (left <= mid && right <= high) {
        if (arr[left] <= arr[right]) {
            temp.push_back(arr[left]);
            left++;
        } else {
            temp.push_back(arr[right]);
            invCount += (mid - left + 1);  // Count inversions
            right++;
        }
    }

    while (left <= mid) {
        temp.push_back(arr[left]);
        left++;
    }

    while (right <= high) {
        temp.push_back(arr[right]);
        right++;
    }

    for (int i = low, j = 0; i <= high; i++, j++) {
        arr[i] = temp[j];
    }

    return invCount;
}

long long mergeSortAndCount(vector<long long>& arr, int low, int high) {
    long long invCount = 0;
    if (low < high) {
        int mid = (low + high) / 2;
        invCount += mergeSortAndCount(arr, low, mid);
        invCount += mergeSortAndCount(arr, mid + 1, high);
        invCount += mergeAndCount(arr, low, mid, high);
    }
    return invCount;
}

long long getInversions(long long* arr, int n) {
    vector<long long> arrVec(arr, arr + n);
    return mergeSortAndCount(arrVec, 0, n - 1);
}
