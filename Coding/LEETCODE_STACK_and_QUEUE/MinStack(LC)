LEETCODE:  155. Min Stack (STACK)

//  easy  method

class MinStack {
    private:
    stack<pair<int,int>> st;
public:
    MinStack() {
        
    }
    
    void push(int val) {
       int mini;
       if(st.empty()) 
       {
        mini=val;
       }
       else{
        mini=min(st.top().second,val);
       }
       st.push({val,mini});
        
    }
    
    void pop() {
        st.pop();
    }
    
    int top() {
        return st.top().first;

    }
    
    int getMin() {
        return st.top().second;

        int top_element=st.top().first;
        return top_element;
    }
};

//                MOST   OPTIMIZED (MATH IS BEHIND IT)  see STRIVE YOUTUBE for math intuition

class Solution{
    int minEle;
    stack<int> s;
    public:
    
       /*returns min element from stack*/
       int getMin(){
           if(s.empty()) return -1;
           return minEle;
       }
       
       /*returns poped element from stack*/
       int pop(){
           
          if(s.empty()) return -1;
          
          int pop_ele=s.top();
          s.pop();
          if(pop_ele<minEle)
          {  
              int actualMin = minEle;
              minEle = 2 * minEle - pop_ele;
              return actualMin;

          }
          
              return pop_ele;
          
       }
       
       /*push element x into the stack*/
       void push(int x){
           
           if(s.empty())
           {
               minEle=x;
               s.push(x);
           }
           else{
               if(x>minEle)
               {
                   s.push(x);
               }
               
               else{
                   s.push(2*x - minEle); 
                   minEle=x;

               }
           }
       }
};

