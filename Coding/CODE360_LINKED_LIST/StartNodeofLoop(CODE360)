CODE360:  Linked List Cycle II (SLL) (finding start node of cycle)

Node *firstNode(Node *head)
{
   Node* slow=head;
   Node* fast=head;
   while(fast && fast->next)
   {
       slow=slow->next;
       fast=fast->next->next;

       if(slow==fast)
       {
           slow=head;
           while(slow!=fast)
           {
               slow=slow->next;
               fast=fast->next;

           }
           return slow;// return fast since both points start node of the loop
       }
   }
   return NULL;
}

//  BRUTE FORCE USING HASHMAP

(LEETCODE)
class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
         unordered_map<ListNode*,int> mpp;
        ListNode*temp=head;
        while(temp)
        {
            if(mpp.find(temp)!=mpp.end())
            {
                return temp; // returning start node
            }
            mpp[temp]++;
            temp=temp->next;
        }
        return NULL;
        
    }
};
