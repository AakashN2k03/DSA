CODE360 : Tree Traversals (STACK)  WITHOUT RECURSION

/*
    Following is Binary Tree Node structure:
    class TreeNode
    {
    public:
        int data;
        TreeNode *left, *right;
        TreeNode() : data(0), left(NULL), right(NULL) {}
        TreeNode(int x) : data(x), left(NULL), right(NULL) {}
        TreeNode(int x, TreeNode *left, TreeNode *right) : data(x), left(left), right(right) {}
    };
*/
vector<vector<int>> getTreeTraversal(TreeNode *root){
    vector<vector<int>> ans;
    stack<pair<TreeNode *, int>> st;
    vector<int> preorder, inorder, postorder;

    if (root == nullptr) return ans;

    st.push({root, 1});

    while (!st.empty()) {   
        auto it = st.top();
        st.pop();

        if (it.second == 1) { // Preorder
            preorder.push_back(it.first->data);
            it.second++;
            st.push(it);

            if (it.first->left != nullptr) {
                st.push({it.first->left, 1});
            }
        } 
        else if (it.second == 2) { // Inorder
            inorder.push_back(it.first->data);
            it.second++;
            st.push(it);

            if (it.first->right != nullptr) {
                st.push({it.first->right, 1});
            }
        } 
        else if (it.second == 3) { // Postorder
            postorder.push_back(it.first->data);
        }
    }

    ans.push_back(inorder);
    ans.push_back(preorder);
    ans.push_back(postorder);
    return ans;
}
