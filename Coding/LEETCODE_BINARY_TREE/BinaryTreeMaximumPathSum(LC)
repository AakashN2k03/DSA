LEETCODE: 124. Binary Tree Maximum Path Sum (RECURSION)

// USE MAXIMUM HEIGHT OF BINARY TREE PROBLEM TO SOLVE THIS PROBLEM

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int maxpath(TreeNode* node,int & maxi)
    {
         if(!node) return 0;
         int left_subtree=max(0,maxpath(node->left,maxi));
         int right_subtree=max(0,maxpath(node->right,maxi));

        maxi=max(maxi,node->val+left_subtree+right_subtree);

        return node->val+max(left_subtree,right_subtree);
    }
    int maxPathSum(TreeNode* root) {
        
        int maxi=INT_MIN;
        maxpath(root,maxi);
        return maxi;
    }
};

// NOTE: Why Use max(0, maxpath(node->left, maxi)) OR Why Use max(0, maxpath(node->right, maxi))??

// Key Reason: Ignore Negative Paths
// If a subtree gives a negative sum, it reduces the overall path sum.

// Instead of including it, we take 0, meaning we choose not to include the path at all.

