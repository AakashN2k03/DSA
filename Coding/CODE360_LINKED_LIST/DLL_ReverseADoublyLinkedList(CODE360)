CODE 360: Reverse A Doubly Linked List (DLL)

// Implementation of DLL using stack (easy)

Node* reverseDLL(Node* head)
{   
    stack<int> st;
    if(head==NULL || head->next==NULL) return head;

    Node* temp=head;
    while(temp)
    {
        st.push(temp->data);
        temp=temp->next;
    }  
    temp=head;
    while(temp)
    {
          temp->data=st.top();
          st.pop();
          temp=temp->next;
    }
    return head;
}

// MOST OPTIMIZED WAY only DLL

class Solution {
  public:
    // Function to reverse a doubly linked list
    DLLNode* reverseDLL(DLLNode* head) {
        // Base cases: Empty list or single node list
        if (head == NULL || head->next == NULL) {
            return head;
        }

        DLLNode* back = NULL;
        DLLNode* temp = head;

        // Traverse the list and swap next and prev pointers
        while (temp != NULL) {
            back = temp->prev;       // Save the previous node
            temp->prev = temp->next; // Swap prev and next
            temp->next = back;       // Update next pointer
            temp = temp->prev;       // Move to the next node (which is the previous node in the original list)
        }

        // Return the new head (last node in the original list)
        return back->prev;
    }
};
