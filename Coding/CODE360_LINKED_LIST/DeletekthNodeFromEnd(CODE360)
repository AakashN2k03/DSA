CODE360: Delete Kth Node From End (SLL)

//  BRUTE FORCE
int length(Node* head)
{
    Node* temp=head;
    int count=0;
    while(temp)
    {
        count++;
        temp=temp->next;
    }
    return count;
}
Node* removeKthNode(Node* head, int k)
{
    if(head==NULL || head->next==NULL) return NULL;
    int tot_len=length(head);
    int res=tot_len-k;

    Node* temp=head;
    if(k==tot_len)
    {
        Node*temp=head;
        head=head->next;
        free(temp);
        return head;
    }
    while(temp)
    {   res--;
        if(res==0)
        {
            Node* delnode=temp->next;
            temp->next=temp->next->next;
            free(delnode);
            return head;
        }
        temp=temp->next;
    }
    return head;
}

//   THE MOST OPTIMIZED APPROACH (UDING FAST AND SLOW POINTER) 
   (LEETCODE)
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        if(head==NULL and head->next==NULL) return NULL;
        ListNode* fast=head;
        ListNode* slow=head;

        for(int i=0;i<n;i++)
        {
             fast=fast->next;
        }
        if(fast==NULL)   //if n==1 head node; if linked list has [one node],n=1,return empty
        {
            ListNode* temp=head;
            head=head->next;
            delete(temp);
            return head;
        }
        while(fast->next)
        {
            fast=fast->next;
            slow=slow->next;
        }
        ListNode* delnode=slow->next;
        slow->next=slow->next->next;
        delete(delnode);
        return head;
        
    }
};

