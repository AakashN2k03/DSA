LEETCODE: 40. Combination Sum II (RECURSION)

class Solution {
public:
  void comb_sum_with_no_repeat(int index,vector<int>&arr,int target,vector<vector<int>>& ans,vector<int>& ds)
  {
    if(target==0)
    {
        ans.push_back(ds);
        return;
    }

    for(int i=index;i<arr.size();i++)
    {
        if(i>index && arr[i]==arr[i-1]) continue;
           if(arr[i]>target) break;
        ds.push_back(arr[i]);
    
        //pick
        comb_sum_with_no_repeat(i+1,arr,target-arr[i],ans,ds);
        ds.pop_back();

    }
    //not pick condition not implemented since it is not necessary

  }
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        sort(candidates.begin(),candidates.end());//since we need vector in ascending order
        vector<vector<int>> ans;
        vector<int>ds;
        comb_sum_with_no_repeat(0,candidates,target,ans,ds);
        return ans;
        
    }
};
