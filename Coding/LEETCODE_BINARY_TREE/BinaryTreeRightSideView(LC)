LEETCODE: 199. Binary Tree Right Side View (RECURSION, Preorder DFS with Right-First traversal.)


// USED ->? Preorder (Root → Left → Right) → Modified (Root → Right → Left) used in this case
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void right(TreeNode* node,int level,vector<int>& res)
    {
        if(node==NULL) return;
        if(level==res.size()) res.push_back(node->val);
         right(node->right,level+1,res);            
         right(node->left,level+1,res);
    }
    vector<int> rightSideView(TreeNode* root) {
        vector<int>res;
        int level=0;
        right(root,level,res);
        return res;
        
    }
};

// NOTE: FOR LEFT VIEW  JUST REVERSE THE TWO RECURSION STATEMENTS
     
right(node->left,level+1,res);
      right(node->right,level+1,res);            
     
