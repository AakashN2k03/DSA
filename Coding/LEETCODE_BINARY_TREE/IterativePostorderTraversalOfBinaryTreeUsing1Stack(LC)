LEETCODE: 145. Binary Tree Postorder Traversal (STACK)   // WITHOUT RECURSION
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

class Solution {
public:
    vector<int> postorderTraversal(TreeNode* root) {
     stack<TreeNode* > st;
     TreeNode* last_visited=nullptr;
     TreeNode* current=root;
     vector<int>ans;

     while(current || !st.empty())
     {
        if(current)
        {
            st.push(current);
            current=current->left;
        }
        else{
            TreeNode* topnode=st.top();
               // If right child exists and hasn't been visited yet
            if(topnode->right && topnode->right!=last_visited)
            {
                current=topnode->right;
            }
                  // Visit the node
            else{
                ans.push_back(topnode->val);
                last_visited=topnode;
                st.pop();
            }
        }
     } 
     return ans;

    }
};
