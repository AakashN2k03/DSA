LEETCODE: 187. Repeated DNA Sequences(HASHMAP)

class Solution {
public:
    vector<string> findRepeatedDnaSequences(string s) {
        unordered_map<string,int>DNA_map;
        vector<string> result;
        if(s.length()<10)
        {
            return result;
        }
        for(int i=0;i<=s.length()-10;i++)  // we want substring of 10 length so we use [s.len()-10]
        {
            string substring=s.substr(i,10); // here i represents the starting index and 10 represents the substring to be of length 10.
            DNA_map[substring]++;
        }
        for(auto& x:DNA_map)
        {
            if(x.second>1)
            {
                result.push_back(x.first);
            }
        }
        return result;
    }
};

//For example: why to use i<=s.length()-10 (less than or equal to)

If s = "AAAAACCCCCAAAAACCCCC", s.length() = 20.
The loop iterates from i = 0 to i = 10:
At i = 10, s.substr(10, 10) extracts the substring starting at index 10 and ending at index 19.
This avoids out-of-bounds errors while covering all valid substrings of length 10.
