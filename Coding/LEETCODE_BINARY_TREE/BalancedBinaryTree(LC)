LEETCODE: 110. Balanced Binary Tree (RECURSION) 
 
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

    // A binary tree is only balanced if   { (height(left subtree) - height(right subtree)) < = 1 }

class Solution {
public:
    int height(TreeNode* node)
    {
        if(node==NULL) return 0;

        int left_subtree=height(node->left);
        if(left_subtree==-1) return -1;

        int right_subtree=height(node->right);
        if(right_subtree==-1) return -1;

        if(abs(left_subtree-right_subtree)>1) return -1;

        return 1+max(left_subtree,right_subtree);
    }
    bool isBalanced(TreeNode* root) {
        return height(root) !=-1;
    }
};
