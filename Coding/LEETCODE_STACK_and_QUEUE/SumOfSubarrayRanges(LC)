LEETCODE: 2104. Sum of Subarray Ranges (STACK)

class Solution {
public:
       vector<int> findPSE(vector<int>& arr) {
        int n = arr.size();
        vector<int> pse(n, -1);
        stack<int> st;

        for (int i = 0; i < n; i++) {
            while (!st.empty() && arr[st.top()] >= arr[i]) {
                st.pop();
            }
            pse[i] = st.empty() ? -1 : st.top();
            st.push(i);
        }
        return pse;
    }

    // Function to find Next Smaller Element (NSE)
    vector<int> findNSE(vector<int>& arr) {
        int n = arr.size();
        vector<int> nse(n, n);
        stack<int> st;

        for (int i = n - 1; i >= 0; i--) {
            while (!st.empty() && arr[st.top()] > arr[i]) {
                st.pop();
            }
            nse[i] = st.empty() ? n : st.top();
            st.push(i);
        }
        return nse;
    }

    // Function to find Previous Greater Element (PGE)
    vector<int> findPGE(vector<int>& arr) {
        int n = arr.size();
        vector<int> pge(n, -1);
        stack<int> st;

        for (int i = 0; i < n; i++) {
            while (!st.empty() && arr[st.top()] <= arr[i]) {
                st.pop();
            }
            pge[i] = st.empty() ? -1 : st.top();
            st.push(i);
        }
        return pge;
    }

    // Function to find Next Greater Element (NGE)
    vector<int> findNGE(vector<int>& arr) {
        int n = arr.size();
        vector<int> nge(n, n);
        stack<int> st;

        for (int i = n - 1; i >= 0; i--) {
            while (!st.empty() && arr[st.top()] < arr[i]) {
                st.pop();
            }
            nge[i] = st.empty() ? n : st.top();
            st.push(i);
        }
        return nge;
    }
    long long subArrayRanges(vector<int>& arr) {
        
       int n = arr.size();

        // Find PSE, NSE, PGE, NGE
        vector<int> pse = findPSE(arr);
        vector<int> nse = findNSE(arr);
        vector<int> pge = findPGE(arr);
        vector<int> nge = findNGE(arr);

        long long sum = 0;

        // Contribution as minimum
        for (int i = 0; i < n; i++) {
            long long leftMin = i - pse[i];
            long long rightMin = nse[i] - i;
            sum -= (leftMin * rightMin * arr[i]);
        }

        // Contribution as maximum
        for (int i = 0; i < n; i++) {
            long long leftMax = i - pge[i];
            long long rightMax = nge[i] - i;
            sum += (leftMax * rightMax * arr[i]);
        }

        return sum;
    }
};
